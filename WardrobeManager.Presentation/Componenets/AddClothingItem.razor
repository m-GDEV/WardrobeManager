@namespace WardrobeManager.Presentation.Components

@using WardrobeManager.Shared.Models;
@using WardrobeManager.Shared.Enums;
@using WardrobeManager.Presentation.Services.Implementation;
@using WardrobeManager.Presentation.Services.Interfaces;

@using WardrobeManager.Shared.Services.Implementation;
@using WardrobeManager.Shared.Services.Interfaces;

@inject IApiService ApiService;
@inject ISharedService SharedService;

<details open=@IsOpen class="flex flex-col w-4/6 ">
    <summary class="pb-4 text-2xl">Add Clothing Item</summary>
    <p class="text-red-500 text-lg">@message</p>
    <EditForm model="@newItem.ClothingItem" class="text-black flex flex-col" OnSubmit="FormSubmitted">
        <InputText @bind-Value=newItem.ClothingItem.Name placeholder="Name" class="form-input" required/>
        <InputSelect @bind-Value=newItem.ClothingItem.Category placeholder="Category" class="form-select" required>
            @foreach (var category in Enum.GetValues(typeof(ClothingCategory)))
            {
                <option value="@category">@category</option>
            }
        </InputSelect>
        <InputFile accept="image/*" capture OnChange="@UploadImage" placeholder="Image" />
        <input type="submit" class="form-input"/>
    </EditForm>
</details>



@code {
    [Parameter]
    public EventCallback RefreshHandler { get; set; }

    public bool IsOpen { get; set; } = false;

    ServerClothingItem? defaultItem = null;
    MemoryStream? img = null;
    NewOrEditedClothingItem? newItem = null;
    string message = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        defaultItem = SharedService.CreateDefaultServerClothingItem();
        newItem = new NewOrEditedClothingItem(defaultItem, "");
    }

    async Task UploadImage(InputFileChangeEventArgs e)
    {
        img = new MemoryStream();
        await e.File.OpenReadStream(maxAllowedSize: 1024 * 5000).CopyToAsync(img);

        newItem.ImageBase64 = Convert.ToBase64String(img.ToArray());

        if (newItem.ImageBase64 == string.Empty)
        {
            message = "Image size too large, try again.";
        }
    }

    async Task FormSubmitted()
    {
        // do stuff with api
        await ApiService.Add(newItem);

        // reset stuff
        defaultItem = SharedService.CreateDefaultServerClothingItem();
        newItem.ClothingItem = defaultItem;
        await RefreshHandler.InvokeAsync();
        IsOpen = false;
    }
}
