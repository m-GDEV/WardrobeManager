@using WardrobeManager.Shared.Models
@using WardrobeManager.Presentation.Components.FormItems
@using WardrobeManager.Presentation.Services.Implementation
@using WardrobeManager.Shared.Enums

@namespace WardrobeManager.Presentation.Components.Clothing


<div class="flex flex-col gap-6">
    <h3 class="subheading-text text-center">Editing @item.Name</h3>
    <div class="flex flex-row justify-center rounded-xl w-full max-w-[40rem] overflow-auto ">
        @*  Left Side *@
        <div class="bg-primary p-6 h-full w-full">
            <EditForm model="@newItem" class=" flex flex-col h-full justify-around">
                <LabelAndElement Label="Name" Orientation="Vertical" TextColorCss="text-primary-content">
                    <TextInput @bind-Value="newItem.Name" Css="bg-primary-content text-primary p-3 rounded-2xl"/>
                </LabelAndElement>
                <LabelAndElement Label="Category" Orientation="Vertical" TextColorCss="text-primary-content">
                    <select @bind=newItem.Category placeholder="Category"
                            class="form-select bg-primary-content text-primary p-3 rounded-2xl">
                        @foreach (var category in Enum.GetValues<ClothingCategory>())
                        {
                            <option value="@category">@ProjectConstants.GetNameWithSpacesAndEmoji(category)</option>
                        }
                    </select>
                </LabelAndElement>
                <LabelAndElement Label="Season" Orientation="Vertical" TextColorCss="text-primary-content">
                    <select @bind=newItem.Season placeholder="Season"
                            class="form-select bg-primary-content text-primary p-3 rounded-2xl">
                        @foreach (var season in Enum.GetValues<Season>())
                        {
                            <option value="@season">@ProjectConstants.GetNameWithSpacesAndEmoji(season)</option>
                        }
                    </select>
                </LabelAndElement>
                <LabelAndElement Label="Favourited" TextColorCss="text-primary-content">
                    <SwitchToggle @bind-Enabled="@newItem.Favourited" ToggleColors="bg-primary hover:bg-primary [--tglbg:oklch(var(--pc)/1)]"/>
                </LabelAndElement>
                <LabelAndElement Label="Upload Image" Orientation="Vertical" TextColorCss="text-primary-content">
                    <InputFile accept="image/*" capture OnChange="@UploadImage" class="file-input file-input-md file-input-secondary w-full max-w-xs text-secondary-content"/>
                </LabelAndElement>
            </EditForm>
        </div>

        @*  Right Side *@
        <div class="bg-primary-content w-full flex flex-col items-center justify-between pt-6 pb-10">
            <h3 class="subtitle-text text-primary">Selected Image:</h3>

            @* show new image if uploaded *@
            @if (newItem.ImageBase64 != string.Empty)
            {
                string src = $"data:image/png;base64, {newItem.ImageBase64}";
                <img src="@src" class="w-5/6 object-contain rounded-xl"/>
            }
            @* show old image if it exists *@
            else if (item.ImageGuid != null)
            {
                <img src="@ProjectConstants.ApiUrl/images/@item.ImageGuid" class="w-5/6 object-contain rounded-xl"/>
            }
            @* show default image if neither *@
            else
            {
                <img src="/defaultItem.png" class="w-5/6 object-contain rounded-xl"/>
            }
            <input type="submit" value="Edit Clothing Item" @onclick="FormSubmitted" class="btn btn-accent"/>
        </div>
    </div>
</div>

@code {
    [Parameter] public ServerClothingItem item { get; set; }
    [Parameter] public string ModalId { get; set; }
    [Parameter] public EventCallback CallbackAfterEdit { get; set; }

    MemoryStream? img = null;
    NewOrEditedClothingItemDTO? newItem = null;

    protected override async Task OnInitializedAsync()
    {
       MakeNewItemReflectSourceItem(); 
    }

    // Do this so it looks like the user is actually editing the original clothing item
    private void MakeNewItemReflectSourceItem()
    {
        newItem = _sharedService.CreateDefaultNewOrEditedClothingItemDTO();
        newItem.Name = item.Name;
        newItem.Category = item.Category;
        newItem.Season = item.Season;
        newItem.Favourited = item.Favourited;
        newItem.WearLocation = item.WearLocation;
        newItem.DesiredTimesWornBeforeWash = item.DesiredTimesWornBeforeWash;
    }

    async Task UploadImage(InputFileChangeEventArgs e)
    {
        img = new MemoryStream();
        await e.File.OpenReadStream(maxAllowedSize: 1024 * 5000).CopyToAsync(img);

        newItem.ImageBase64 = Convert.ToBase64String(img.ToArray());

        if (newItem.ImageBase64 == string.Empty)
        {
            _notificationService.AddNotification("Image size too large, try again.", NotificationType.Warning);
        }
    }

    async Task FormSubmitted()
    {
        // do stuff with api
        try
        {
            await _apiService.Update(newItem, item.Id);
            await JsRuntime.InvokeVoidAsync("CloseModal", ModalId);
            await CallbackAfterEdit.InvokeAsync();
            _notificationService.AddNotification("Clothing Item Edited Successfully!", NotificationType.Success);
        }
        catch (Exception ex)
        {
            _notificationService.AddNotification($"Error: {ex.Message}", NotificationType.Error);
        }

        MakeNewItemReflectSourceItem();
    }

}