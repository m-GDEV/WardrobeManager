@using WardrobeManager.Shared.Models
@using WardrobeManager.Presentation.Components.FormItems
@using WardrobeManager.Presentation.Services.Implementation
@using WardrobeManager.Shared.Enums

@namespace WardrobeManager.Presentation.Components.Clothing


<div class="flex flex-col gap-6">
    @if (Editing)
    {
        <h3 class="subheading-text text-center">Editing @EditedItem.Name</h3>
    }
    <div class="flex flex-row justify-center rounded-xl w-full max-w-[40rem] overflow-auto ">
        @*  Left Side *@
        <div class="bg-primary p-6 w-full">
            <EditForm model="@newItem" class=" flex flex-col h-full justify-around">
                <LabelAndElement Label="Name" Orientation="Vertical" TextColorCss="text-primary-content">
                    <TextInput @bind-Value="newItem.Name" Css="bg-primary-content text-primary p-3 rounded-2xl"/>
                </LabelAndElement>
                <LabelAndElement Label="Category" Orientation="Vertical" TextColorCss="text-primary-content">
                    <select @bind=newItem.Category placeholder="Category"
                            class="form-select bg-primary-content text-primary p-3 rounded-2xl">
                        @foreach (var category in Enum.GetValues<ClothingCategory>())
                        {
                            <option value="@category">@ProjectConstants.GetNameWithSpacesAndEmoji(category)</option>
                        }
                    </select>
                </LabelAndElement>
                <LabelAndElement Label="Season" Orientation="Vertical" TextColorCss="text-primary-content">
                    <select @bind=newItem.Season placeholder="Season"
                            class="form-select bg-primary-content text-primary p-3 rounded-2xl">
                        @foreach (var season in Enum.GetValues<Season>())
                        {
                            <option value="@season">@ProjectConstants.GetNameWithSpacesAndEmoji(season)</option>
                        }
                    </select>
                </LabelAndElement>
                <LabelAndElement Label="Favourited" TextColorCss="text-primary-content">
                    <SwitchToggle @bind-Enabled="@newItem.Favourited" ToggleColors="bg-primary hover:bg-primary [--tglbg:oklch(var(--pc)/1)]"/>
                </LabelAndElement>
                <input type="submit" value="@SubmitButtonText" @onclick="FormSubmitted" class="btn btn-accent"/>
            </EditForm>
        </div>

        @*  Right Side *@
        <div class="bg-primary-content w-full flex flex-col items-center justify-between p-6 gap-6">
            <h3 class="subtitle-text text-primary">Selected Image:</h3>

            @* show new image if uploaded *@
            @if (newItem.ImageBase64 != string.Empty)
            {
                string src = $"data:image/png;base64, {newItem.ImageBase64}";
                <img src="@src" class="w-5/6 object-contain rounded-xl"/>
            }
            @* (editing item) show old image if it exists *@
            else if (EditedItem is not null && EditedItem?.ImageGuid != null)
            {
                <img src="@ProjectConstants.ApiUrl/images/@EditedItem.ImageGuid" class="w-5/6 object-contain rounded-xl"/>
            }
            @* show default image if neither *@
            else
            {
                <img src="/img/defaultItem.png" class="w-5/6 object-contain rounded-xl"/>
            }
                <LabelAndElement Label="Upload Image" Orientation="Vertical" TextColorCss="text-primary pt-2">
                    <InputFile accept="image/*" capture OnChange="@UploadImage" class="file-input file-input-md file-input-secondary mx-auto w-full text-secondary"/>
                </LabelAndElement>

        </div>
    </div>
</div>

@code {


    // Used for new item

    // Used for editing item
    [Parameter] public ServerClothingItem? EditedItem { get; set; }

    // Used for both
    [Parameter] public bool Editing { get; set; } = false;
    [Parameter] public EventCallback<NewOrEditedClothingItemDTO> SubmitForm { get; set; }

    public string SubmitButtonText = string.Empty;
    NewOrEditedClothingItemDTO? newItem = null;
    MemoryStream? img = null;


    // Overriding methods
    protected override async Task OnParametersSetAsync()
    {
        if (Editing && EditedItem == null)
        {
            throw new Exception("You cannot use this component in edit mode without supplying an item to Edit!");
        }
        
        InitializeNewItem();

        SubmitButtonText = Editing == true ? "Edit Clothing Item" : "Add Clothing Item";
        await base.OnParametersSetAsync();
    }

    // Do this so it looks like the user is actually editing the original clothing item
    private void InitializeNewItem()
    {
        newItem = _sharedService.CreateDefaultNewOrEditedClothingItemDTO();
        if (Editing)
        {
            newItem.Name = EditedItem.Name;
            newItem.Category = EditedItem.Category;
            newItem.Season = EditedItem.Season;
            newItem.Favourited = EditedItem.Favourited;
            newItem.WearLocation = EditedItem.WearLocation;
            newItem.DesiredTimesWornBeforeWash = EditedItem.DesiredTimesWornBeforeWash;
        }
    }

    async Task UploadImage(InputFileChangeEventArgs e)
    {
        img = new MemoryStream();
        await e.File.OpenReadStream(maxAllowedSize: 1024 * 5000).CopyToAsync(img);

        newItem.ImageBase64 = Convert.ToBase64String(img.ToArray());

        if (newItem.ImageBase64 == string.Empty)
        {
            _notificationService.AddNotification("Image size too large, try again.", NotificationType.Warning);
        }
    }

    async Task FormSubmitted()
    {
        // The parent page/component will handle API & notification logic, here I just manage this componenet's state
        await SubmitForm.InvokeAsync(newItem);

        InitializeNewItem();
    }

}