@page "/add"

@namespace WardrobeManager.Presentation.Components
@attribute [Authorize]

@using WardrobeManager.Shared.Models;
@using WardrobeManager.Shared.Enums;
@using WardrobeManager.Presentation.Services.Implementation;
@using WardrobeManager.Presentation.Services.Interfaces;
@using WardrobeManager.Presentation.Components.FormItems

@using WardrobeManager.Shared.Services.Implementation;
@using WardrobeManager.Shared.Services.Interfaces;

@using System.Text.RegularExpressions;

@inject IApiService ApiService;
@inject ISharedService SharedService;


<div class="w-full flex flex-col items-center">
    <div class="w-3/5 flex flex-col items-center">
        <h1 class="heading-text pt-14 pb-6">Add A Clothing Item</h1>
        <p class="subtitle-text pb-10">Clothing items can have multiple characteristics, allowing you to perfectly categorize your wardrobe!</p>
        @* hidden overflow is to make child elements confrom to border radius *@
        <div class="flex flex-row justify-center rounded-xl w-full max-w-[40rem] overflow-auto ">
            @*  Left Side *@
            <div class="bg-primary p-6 h-full w-full">
                <EditForm model="@newItem" class=" flex flex-col h-full justify-around">
                    <LabelAndElement Label="Name" Orientation="Vertical">
                        <InputText class="bg-primary-content text-primary p-3 rounded-2xl" @bind-Value="newItem.Name"
                                   placeholder="My favourite Green T-Shirt"/>
                    </LabelAndElement>
                    <LabelAndElement Label="Category" Orientation="Vertical">
                        <InputSelect @bind-Value=newItem.Category  placeholder="Category"
                                     class="form-select bg-primary-content text-primary p-3 rounded-2xl">
                            @foreach (var category in Enum.GetValues(typeof(ClothingCategory)))
                            {
                                var words =
                                    Regex.Matches(category.ToString(), @"([A-Z][a-z]+)")
                                    .Cast<Match>()
                                    .Select(m => m.Value);

                                var cat = (ClothingCategory)category;
                                var withSpaces = string.Join(" ", words);
                                var emoji = ProjectConstants.GetEmojiForClothingCategory(cat);

                                <option value="@category">@emoji  @withSpaces</option>
                            }
                        </InputSelect>
                    </LabelAndElement>
                    <LabelAndElement Label="Season" Orientation="Vertical">
                        <InputSelect @bind-Value=newItem.Season  placeholder="Season"
                                     class="form-select bg-primary-content text-primary p-3 rounded-2xl">
                            @foreach (var season in Enum.GetValues(typeof(Season)))
                            {
                                var words =
                                    Regex.Matches(season.ToString(), @"([A-Z][a-z]+)")
                                    .Cast<Match>()
                                    .Select(m => m.Value);

                                var sea = (Season)season;
                                var withSpaces = string.Join(" ", words);
                                var emoji = ProjectConstants.GetEmojiForSeason(sea);
                                <option value="@season">@emoji @withSpaces</option>
                            }
                        </InputSelect>
                    </LabelAndElement>
                    <LabelAndElement Label="Favourited">
                        <SwitchToggle Enabled="@newItem.Favourited" EnabledChanged="@(() => newItem.Favourited = !newItem.Favourited)" />
                    </LabelAndElement>
                    <LabelAndElement Label="Upload Image" Orientation="Vertical">
                        <InputFile accept="image/*" capture OnChange="@UploadImage"  class="file-input file-input-md file-input-secondary w-full max-w-xs"/>
                    </LabelAndElement>
                </EditForm>
            </div>

            @*  Right Side *@
            <div class="bg-primary-content w-full h-full flex flex-col items-center justify-between py-6">
                @if (newItem.ImageBase64 != string.Empty) {
                    string src = $"data:image/png;base64, {newItem.ImageBase64}";
                    <img src="@src" class="w-5/6 object-contain rounded-xl"/>
                }
                else {
                    <img src="/defaultItem.png" class="w-5/6 object-contain rounded-xl"/>
                }
                <input type="submit" value="Add Clothing Item" onclick="@FormSubmitted" class="btn btn-accent " />
            </div>
        </div>
    </div>
</div>


@code {
    MemoryStream? img = null;
    NewOrEditedClothingItemDTO? newItem = null;

    protected override async Task OnInitializedAsync()
    {
        newItem = SharedService.CreateDefaultNewOrEditedClothingItemDTO();
    }

    async Task UploadImage(InputFileChangeEventArgs e)
    {
        img = new MemoryStream();
        await e.File.OpenReadStream(maxAllowedSize: 1024 * 5000).CopyToAsync(img);

        newItem.ImageBase64 = Convert.ToBase64String(img.ToArray());

        if (newItem.ImageBase64 == string.Empty)
        {
            @* message = "Image size too large, try again."; *@
        }
    }

    async Task FormSubmitted()
    {
        // do stuff with api
        @* await ApiService.Add(newItem); *@
        newItem = SharedService.CreateDefaultNewOrEditedClothingItemDTO();
    }
}
