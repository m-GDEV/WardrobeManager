@page "/add"

@namespace WardrobeManager.Presentation.Components

@using WardrobeManager.Shared.Models;
@using WardrobeManager.Shared.Enums;
@using WardrobeManager.Presentation.Services.Implementation;
@using WardrobeManager.Presentation.Services.Interfaces;
@using WardrobeManager.Presentation.Components.FormItems

@using WardrobeManager.Shared.Services.Implementation;
@using WardrobeManager.Shared.Services.Interfaces;

@using System.Text.RegularExpressions;

@inject IApiService ApiService;
@inject ISharedService SharedService;

<div class="w-full flex flex-col items-center">
    <div class="w-3/5 flex flex-col items-center">
        <h1 class="heading-text pt-14 pb-6">Add A Clothing Item</h1>
        <p class="subtitle-text pb-10">Clothing items can have multiple characteristics, allowing you to perfectly categorize your wardrobe!</p>
        <div class="flex flex-row justify-center rounded-xl w-1/2 outline">
            @*  Left Side *@
            <div class="bg-primary p-6">
                <EditForm model="@newItem">
                    <div class="pb-4">
                        <p class="body-text text-primary-content">Name</p>
                        <InputText class="bg-primary-content text-primary p-3 rounded-2xl" @bind-Value="newItem.Name"
                                   placeholder="My favourite Green T-Shirt"/>
                    </div>
                    <div class="pb-4">
                        <p class="body-text text-primary-content">Category</p>
                        <InputSelect @bind-Value=newItem.Category  placeholder="Category"
                                     class="form-select bg-primary-content text-primary p-3 rounded-2xl">
                            @foreach (var category in Enum.GetValues(typeof(ClothingCategory)))
                            {
                                var words =
                                    Regex.Matches(category.ToString(), @"([A-Z][a-z]+)")
                                    .Cast<Match>()
                                    .Select(m => m.Value);

                                var withSpaces = string.Join(" ", words);
                                <option value="@category">@withSpaces</option>
                            }
                        </InputSelect>
                    </div>
                    <div class="pb-4">
                        <p class="body-text text-primary-content">Season</p>
                        <InputSelect @bind-Value=newItem.Season  placeholder="Season"
                                     class="form-select bg-primary-content text-primary p-3 rounded-2xl">
                            @foreach (var season in Enum.GetValues(typeof(Season)))
                            {
                                var words =
                                    Regex.Matches(season.ToString(), @"([A-Z][a-z]+)")
                                    .Cast<Match>()
                                    .Select(m => m.Value);

                                var withSpaces = string.Join(" ", words);
                                <option value="@season">@withSpaces</option>
                            }
                        </InputSelect>
                    </div>
                    @* <SwitchToggle Label="Favourited" Enabled="@newItem.Favourited" EnabledChanged="@(() => newItem.Favourited = !newItem.Favourited)" /> *@
                </EditForm>
            </div>

            @*  Right Side *@
            <div class="bg-primary-content">
            </div>
        </div>
    </div>
</div>


@code {
    MemoryStream? img = null;
    NewOrEditedClothingItemDTO? newItem = null;

    protected override async Task OnInitializedAsync()
    {
        newItem = SharedService.CreateDefaultNewOrEditedClothingItemDTO();
    }

    async Task UploadImage(InputFileChangeEventArgs e)
    {
        img = new MemoryStream();
        await e.File.OpenReadStream(maxAllowedSize: 1024 * 5000).CopyToAsync(img);

        newItem.ImageBase64 = Convert.ToBase64String(img.ToArray());

        if (newItem.ImageBase64 == string.Empty)
        {
            @* message = "Image size too large, try again."; *@
        }
    }

    async Task FormSubmitted()
    {
        // do stuff with api
        @* await ApiService.Add(newItem); *@
        newItem = SharedService.CreateDefaultNewOrEditedClothingItemDTO();
    }
}
