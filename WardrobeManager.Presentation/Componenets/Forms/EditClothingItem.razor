@namespace WardrobeManager.Presentation.Components

@using WardrobeManager.Shared.Models;
@using WardrobeManager.Shared.Enums;
@using WardrobeManager.Presentation.Services.Implementation;
@using WardrobeManager.Presentation.Services.Interfaces;

@inject IApiService ApiService;

<details open=@IsOpen>
    <summary class="flex flex-row gap-2">
        <svg class="feather feather-edit" fill="none" height="24" stroke="currentColor"
             stroke-linecap="round" stroke-linejoin="round" stroke-width="2" viewBox="0 0 24 24"
             width="24" xmlns="http://www.w3.org/2000/svg">
            <path d="M11 4H4a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2v-7" />
            <path d="M18.5 2.5a2.121 2.121 0 0 1 3 3L12 15l-4 1 1-4 9.5-9.5z" />
        </svg>
    </summary>
    <p class="text-red-500 text-lg">@message</p>
    <EditForm model="@ClothingItem" OnSubmit="@(() => FormSubmitted())" class="text-black flex flex-col">
        <InputText @bind-Value=ClothingItem.Name placeholder="Name" class="form-input" required />
        <InputSelect @bind-Value=ClothingItem.Category placeholder="Category" class="form-select" required>
            @foreach (var category in Enum.GetValues(typeof(Shared.Enums.ClothingCategory)))
            {
                <option value="@category">@category</option>
            }
        </InputSelect>
        <InputFile accept="image/*" capture OnChange="@UploadImage" placeholder="Image" />
        <input type="submit" class="form-input" />
    </EditForm>
</details>


@code {
    [Parameter]
    public EventCallback RefreshHandler { get; set; }
    [Parameter]
    public ServerClothingItem ClothingItem { get; set; } // idk why theres a CS8618

    NewOrEditedClothingItem? editedClothingItem { get; set; }
    MemoryStream? img = null;

    public bool IsOpen { get; set; } = false;
    string message = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        editedClothingItem = new NewOrEditedClothingItem(ClothingItem, "");
    }

    async Task UploadImage(InputFileChangeEventArgs e)
    {
        img = new MemoryStream();
        // max file size of 5 mebibytes
        await e.File.OpenReadStream(maxAllowedSize: 1024 * 5000).CopyToAsync(img);

        editedClothingItem.ImageBase64 = Convert.ToBase64String(img.ToArray());

        if (editedClothingItem.ImageBase64 == string.Empty)
        {
            message = "Image size too large, try again.";
        }
    }

    async Task FormSubmitted()
    {
        // do stuff with api
        await ApiService.Update(editedClothingItem);
        await RefreshHandler.InvokeAsync();
        IsOpen = false;
    }
}
