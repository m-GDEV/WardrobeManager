@namespace WardrobeManager.Presentation.Components.Clothing

@using WardrobeManager.Shared.Models;
@using WardrobeManager.Shared.Enums;
@using WardrobeManager.Presentation.Services.Implementation;
@using WardrobeManager.Presentation.Services.Interfaces;

@using WardrobeManager.Shared.Services.Implementation;
@using WardrobeManager.Shared.Services.Interfaces;


<div class="flex flex-row justify-between py-4 px-8 bg-primary-content w-full rounded-lg items-center">
    @* Left section *@
    <div class="flex flex-row gap-5 grow items-center">
        <div class="w-1/5">
            <Image ImageGuid="Item.ImageGuid" Css="rounded-lg" />
        </div>
        @* Text part *@
        <div class="flex flex-col justify-between grow h-full gap-5">
            <div>
                <div class="flex flex-row  gap-2 items-center">
                    <p class="subtitle-text text-primary">@Item.Name</p>
                    @if (Item.Favourited)
                    {
                        <span class="body-text bi bi-stars text-accent"></span>
                    }
                </div>
                <div class="flex flex-row gap-5 pt-2">
                    <Tag Label="@MiscMethods.GetNameWithSpacesAndEmoji(Item.Category)" AdditionalCss="text-secondary-content bg-secondary"/>
                    <Tag Label="@MiscMethods.GetNameWithSpacesAndEmoji(Item.Season)" AdditionalCss="text-secondary-content bg-secondary"/>
                </div>
            </div>

            <p class="body-text text-primary">
                Last updated: @Item.DateUpdated.ToString("MMMM d, yyyy")
            </p>
        </div>
    </div>
    @* Right section *@
    <div class="flex flex-col items-center justify-between h-full gap-2">
        <SmallButton Label="View" AdditionalCss="btn-accent w-[8rem] " OptionalActionToDo="HandleView"/>
        <div onclick="@($"{ModalId}.showModal()")" class="w-full">
            <SmallButton Label="Edit" AdditionalCss="btn-primary w-[8rem] "/>
        </div>
        <SmallButton Label="Delete" AdditionalCss="btn-secondary w-[8rem] " OptionalActionToDo="HandleDelete"/>
    </div>
</div>

@* Modal that pops up when user clicks 'edit' *@
<Modal Id="@ModalId" MaxWidth="max-w-[40rem]">
    <NewOrEditItemSection Editing="true" EditedItem="Item" SubmitForm="HandleEdit"/>
</Modal>



@code {

    // Init stuff
    [Parameter] public required ServerClothingItem Item { get; set; }

    // view has a separate callback because the action Clothing.razor must do is unique
    [Parameter] public EventCallback<ServerClothingItem> ViewCallback { get; set; }
    [Parameter] public EventCallback CallbackAfterEditAndDelete { get; set; }

    public string ModalId { get; set; } = MiscMethods.GenerateRandomId();

    // Methods to handle View, Edit, and Delete
    public async Task HandleView()
    {
        await ViewCallback.InvokeAsync(Item);
    }

    public async Task HandleEdit(NewOrEditedClothingItemDTO newItem)
    {
        try
        {
            await _apiService.Update(newItem, Item.Id);
            await JsRuntime.InvokeVoidAsync("CloseModal", ModalId);
            await CallbackAfterEditAndDelete.InvokeAsync(); // From Clothing.razor
            _notificationService.AddNotification("Clothing Item Edited Successfully!", NotificationType.Success);
        }
        catch (Exception ex)
        {
            _notificationService.AddNotification($"Error: {ex.Message}", NotificationType.Error);
        }
    }

    public async Task HandleDelete()
    {
        try
        {
            await _apiService.Delete(Item);
            await CallbackAfterEditAndDelete.InvokeAsync(); // From Clothing.razor
        }
        catch (HttpRequestException ex)
        {
            _notificationService.AddNotification($"Cannot fetch clothing: {ex.Message}", NotificationType.Error);
        }
    }

}