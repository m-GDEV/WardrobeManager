@namespace WardrobeManager.Presentation.Components.Shared

@inject INotificationService _notificationService


<div class="toast toast-top toast-end">
    @foreach (var notification in _notificationService.Notifications) {
        var cssClass = GetNotificationCssClass(notification.type) ;
        <div class="alert @cssClass text-wrap inline-flex flex-row justify-between w-full">
            <span>@notification.message</span>
            <button class="w-5 h-5" @onclick="(() => Dismiss(notification))"><img src="https://www.svgrepo.com/show/12848/x-symbol.svg" /></button>
        </div>

    }
</div>

@code {
    protected override void OnInitialized() {
        _notificationService.OnChange += StateHasChanged;
        // this runs the callback method suppleid every 5 seconds. it does not wait for the last 
        // call to the method to finish. this can cause race conditions. it should be fine though
        var _timer = new Timer(TryToClearNotifications, null, TimeSpan.Zero,TimeSpan.FromSeconds(5));
    }

    // Go through all notifications and try to remove the non-critical ones
    private void TryToClearNotifications(object? state)
    {
        var notifications = _notificationService.Notifications;

        foreach (var notification in notifications)
        {
            TimeSpan difference = DateTime.UtcNow - notification.CreationDate;

            if (difference.TotalSeconds > 10 && notification.type != NotificationType.Warning && notification.type != NotificationType.Error)
            {
                _notificationService.RemoveNotification(notification);
            }
        }
    }

    private void Dismiss(NotificationMessage notification)
    {
        _notificationService.RemoveNotification(notification);
    }

    public void Dispose()
    {
        _notificationService.OnChange -= StateHasChanged;
    }

    public string GetNotificationCssClass(NotificationType type)
    {
        return type switch
        {
            NotificationType.Info => "alert-info",
            NotificationType.Success => "alert-success",
            NotificationType.Warning => "alert-warning",
            NotificationType.Error => "alert-error",
            _ => ""
        };
    }
}
