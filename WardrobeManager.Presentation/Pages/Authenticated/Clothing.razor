@page "/clothing"
@attribute [Authorize]

@using WardrobeManager.Presentation.Components
@using WardrobeManager.Presentation.Components.FormItems
@using WardrobeManager.Shared.Models
@using WardrobeManager.Presentation.Services.Implementation
@using WardrobeManager.Presentation.Services.Interfaces
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication


@inject IApiService ApiService
@* @inject HttpClient Http *@
@* @inject IHttpClientFactory ClientFactory *@

<PageTitle>Clothing</PageTitle>


@* <h1 class="subheading-text">@userid</h1> *@

<div class="w-full flex flex-col items-center">
    @if (error) {
        <div class="toast toast-top toast-end">
            <div class="alert alert-error">
                <span>@errorMessage</span>
                <button class="w-5 h-5" onclick=@(() => error = false)><img src="https://www.svgrepo.com/show/12848/x-symbol.svg" /></button>
            </div>
        </div>
    }

    <h1 class="pt-14 pb-12 heading-text">Create, view, and edit your clothing items here!</h1>



    <div class="pb-10 px-8 gap-8 flex flex-row justify-center w-full h-full">
        <div class="w-1/4 flex flex-col items-center">
            <h3 class="subheading-text">Filters</h3>
            <div class="rounded-xl bg-primary-content flex-grow w-full">
                <SwitchToggle Label="Penis Muncher" Enabled=@enabled />
                <p>thing</p>
            </div>
        </div>
        <div class="w-3/4 bg-primary">Centre column</div>
        <div class="w-1/4 bg-primary-content">Right column</div>
    </div>
</div>

@code {
    List<ServerClothingItem>? clothing = null;
    bool error = false;
    string errorMessage = "";

    public bool enabled { get; set; } = false;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            clothing = await ApiService.GetClothing();

        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
        catch (HttpRequestException) {
            error = true;
            errorMessage = "Cannot connect to API";
        }

    }
    public async Task Refresh()
    {

        StateHasChanged();
    }

    public async Task DeleteItem(ServerClothingItem item)
    {
        await ApiService.Delete(item);
        await Refresh();
    }

}
