@page "/clothing"
@attribute [Authorize]

@using System.Reflection
@using System.Reflection.Metadata.Ecma335
@using System.Text.Json
@using WardrobeManager.Presentation.Components
@using WardrobeManager.Presentation.Components.FormItems
@using WardrobeManager.Presentation.Components.Clothing
@using WardrobeManager.Shared.Models
@using WardrobeManager.Shared.Enums
@using WardrobeManager.Presentation.Services.Implementation
@using WardrobeManager.Presentation.Services.Interfaces
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using System.Text.RegularExpressions
@using Microsoft.AspNetCore.WebUtilities


@inject IApiService _apiService
@inject INotificationService _notificationService

<PageTitle>Clothing</PageTitle>

@* This page is a pain in my ass. I have to manually specifiy the height percentages for the two elements because if i do flex and grow it fucks everyting *@

<div class="h-full">
    <h1 class="heading-text text-center py-4 h-[15%]">Create, view, and edit your clothing items here!</h1>

    <div class="flex  flex-row items-center h-[80%] px-8 gap-8 justify-center w-full">
        @* Left Column *@
        <div class="basis-1/4 flex flex-col items-center grow h-full">
            <div class="flex flex-row justify-center relative w-full items-center">
                <h3 class="subheading-text">Filters</h3>
                <button @onclick="(async () => await ResetFilterModel())" class="absolute right-0 btn btn-sm btn-accent text-accent-content">Reset!</button>
            </div>
            <div class="rounded-xl bg-primary-content  w-full p-4 text-primary flex flex-col grow overflow-auto">

                <EditForm EditContext="FilterContext" class="flex flex-col  h-full">
                    @* Toggles *@
                    <LabelAndElement Label="Has Image" Orientation="horizontal">
                        <SwitchToggle @bind-Enabled="filterModel.HasImage"/>
                    </LabelAndElement>
                    <LabelAndElement Label="Favourited" Orientation="horizontal">
                        <SwitchToggle @bind-Enabled="filterModel.Favourited"/>
                    </LabelAndElement>
                    <LabelAndElement Label="Recently Added" Orientation="horizontal">
                        <SwitchToggle @bind-Enabled="filterModel.RecentlyAdded"/>
                    </LabelAndElement>

                    @* Selects *@
                    <LabelAndElement Label="Category">
                        <select @bind="filterModel.Category" @bind:after="FetchClothing" class="select select-sm w-[10rem] rounded-md bg-primary text-primary-content">
                            @foreach (var category in Enum.GetValues<ClothingCategory>())
                            {
                                <option value="@category">@MiscMethods.GetNameWithSpacesAndEmoji(category)</option>
                            }
                        </select>
                    </LabelAndElement>
                    <LabelAndElement Label="Season">
                        <select @bind="filterModel.Season" @bind:after="FetchClothing" class="select select-sm rounded-md w-[10rem] bg-primary text-primary-content">
                            @foreach (var season in Enum.GetValues<Season>())
                            {
                                <option value="@season">@MiscMethods.GetNameWithSpacesAndEmoji(season)</option>
                            }
                        </select>
                    </LabelAndElement>

                    @* Data Pickers *@
                    <LabelAndElement Label="Date Added">
                        <DatePicker @bind-FromDate="filterModel.DateAddedFrom" @bind-ToDate="filterModel.DateAddedTo"/>
                    </LabelAndElement>
                    <LabelAndElement Label="Last Worn">
                        <DatePicker @bind-FromDate="filterModel.LastWornFrom" @bind-ToDate="filterModel.LastWornTo"/>
                    </LabelAndElement>
                    <LabelAndElement Label="Last Edited">
                        <DatePicker @bind-FromDate="filterModel.LastEditedFrom" @bind-ToDate="filterModel.LastEditedTo"/>
                    </LabelAndElement>

                    @* Ranges *@
                    <LabelAndElement Label="Times Worn">
                        <Range @bind-Count="filterModel.TimesWorn" OptionalCallback="FetchClothing"/>
                    </LabelAndElement>
                    <LabelAndElement Label="Times Worn Since Wash">
                        <Range @bind-Count="filterModel.TimesWornSinceWash" OptionalCallback="FetchClothing"/>
                    </LabelAndElement>
                </EditForm>
            </div>
        </div>
        @* Centre Column *@
        <div class="basis-2/4  rounded-xl flex flex-col items-center   p-4 grow h-full justify-between">
            <EditForm EditContext="FilterContext" class="flex flex-row items-center justify-between gap-5 py-4 pb-4">
                <div class="flex flex-row justify-between  bg-base-200 px-4 py-2 rounded-full gap-6">
                    <TextInput @bind-Value="filterModel.SearchQuery" placeholder="Green T-Shirt" Css="bg-base-200 text-base-content" OptionalCallback="FetchClothing"/>
                    <span class="bi bi-search"/>
                </div>
                <div class="flex flex-row gap-3 items-center">
                    <p class="subtitle-text text-base-content">Sort By</p>
                    <select required @bind="@filterModel.SortBy" @bind:after="FetchClothing" class="select select-sm rounded-md bg-primary-content text-primary">
                        @foreach (var sortBy in Enum.GetValues<SortByCategories>())
                        {
                            <option value="@sortBy">@MiscMethods.GetNameWithSpacesFromEnum(sortBy)</option>
                        }
                    </select>

                    <p class="text-base-content">Ascending?</p>
                    <InputCheckbox @bind-Value="filterModel.IsAscending" class="checkbox checkbox-secondary"/>
                </div>

            </EditForm>
            <div class=" flex flex-col items-center gap-6 w-4/5  overflow-auto">
                @if (clothing != null)
                {
                    foreach (var item in clothing)
                    {
                        <ItemSummary Item="item" ViewCallback="ChangeSelectedItem" CallbackAfterEditAndDelete="FetchClothing"/>
                    }
                }
            </div>
            <p class="ody-text text-center pt-4">📜 Scroll for more!</p>

        </div>
        @* Right Column *@
        <div class="basis-1/4 flex flex-col items-center grow h-full ">
            <h3 class="subheading-text">Preview</h3>
            <div class="rounded-xl bg-primary-content grow w-full p-4 text-primary flex flex-col  h-full overflow-auto">
                @if (selectedItem == null)
                {
                    @* https://stackoverflow.com/questions/32551291/in-css-flexbox-why-are-there-no-justify-items-and-justify-self-properties*@
                    @* Using my-auto cus there is no justify-self-center like self-center exists for the cross axis*@
                    <p class="subheading-text text-primary my-auto text-center">Press 'view' to see an item's details here!</p>
                }
                else
                {
                    @* Info *@
                    <div class="shrink basis-auto">
                        <p class="subtitle-text">
                            @selectedItem.Name
                            @if (selectedItem.Favourited)
                            {
                                <span class="pl-2 bi bi-stars text-xl text-accent"></span>
                            }
                        </p>
                        <div class="flex flex-row gap-3 py-4">
                            <span class="small-text badge badge-lg badge-secondary">@MiscMethods.GetNameWithSpacesAndEmoji(selectedItem.Category)</span>
                            <span class="small-text badge badge-lg badge-accent">@MiscMethods.GetNameWithSpacesAndEmoji(selectedItem.Season)</span>
                        </div>
                        <LabelAndElement Label="Last Edited">
                            <p>@selectedItem.DateUpdated.ToString("MMMM d, yyyy")</p>
                        </LabelAndElement>
                        <LabelAndElement Label="Date Added">
                            <p>@selectedItem.DateAdded.ToString("MMMM d, yyyy")</p>
                        </LabelAndElement>
                        <LabelAndElement Label="Last Worn">
                            <p>@selectedItem.LastWorn.ToString("MMMM d, yyyy")</p>
                        </LabelAndElement>
                        <LabelAndElement Label="Desired Time Worn Before Wash">
                            <p>@selectedItem.DesiredTimesWornBeforeWash</p>
                        </LabelAndElement>
                        <LabelAndElement Label="Total Times Worn">
                            <p>@selectedItem.TimesWornTotal</p>
                        </LabelAndElement>
                        <div class="flex flex-row justify-center gap-5">
                            <button class=" btn btn-sm btn-accent" @onclick="(async () => await Wear())">Wear</button>
                            <button class=" btn btn-sm btn-accent" @onclick="(async () => await Wash())">Wash</button>
                        </div>

                    </div>
                    @* Image *@
                    @if (selectedItem.ImageGuid == null)
                    {
                        @* When ImageGuid is null it sends a request to this endpoint: "/images/". This does not go to the right controller so i'm doing this for now*@
                        <img src="@ProjectConstants.ApiUrl/images/faasdfj" class="h-full object-contain rounded-xl mx-auto mt-4"/>
                    }
                    else
                    {
                        <img src="@ProjectConstants.ApiUrl/images/@selectedItem.ImageGuid" class="h-full object-contain rounded-xl mx-auto mt-4"/>
                    }
                }
            </div>
        </div>
    </div>

</div>

@code {
    List<ServerClothingItem>? clothing = null;
    EditContext? FilterContext;
    public FilterModel filterModel = new FilterModel();
    public ServerClothingItem? selectedItem = null;


    // Blazor Override Stuff
    protected override async Task OnInitializedAsync()
    {
        // An EditForm context allows me to define an EventCallback to run whenever a form element is changed
        FilterContext = new EditContext(filterModel);
        FilterContext.OnFieldChanged += OnFieldChanged;

        var uri = _navManager.ToAbsoluteUri(_navManager.Uri);

        // Look for query param that represents filterModel & try to deserialize & use it 
        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("filterModel", out var givenFilterModel))
        {
            try
            {
                FilterModel? deserializedFilterModel = JsonSerializer.Deserialize<FilterModel>(givenFilterModel.ToString());
                filterModel = deserializedFilterModel ?? filterModel;
            }
            catch
            {
                // ignore the invalid data 
            }
        }


        await FetchClothing();


        // Parse Query Params
        if (clothing == null)
        {
            return;
        }


        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("itemId", out var itemId))
        {
            var specifiedItem = clothing.FirstOrDefault(s => s.Id == Convert.ToInt32(itemId));
            // If no item is found selectedItem will remain null and it will be as if nothing happened
            selectedItem = specifiedItem;
        }

        await base.OnInitializedAsync();
    }

    // My Methods
    public async Task FetchClothing()
    {
        try
        {
            clothing = await _apiService.GetFilteredClothing(filterModel);

            // refresh the selected item (necessary to refresh because this does not get updated when the old clothing is replaced)
            if (selectedItem != null)
            {
                selectedItem = clothing?.FirstOrDefault(item => item.Id == selectedItem.Id);
            }

            // update URL query params so stats is persisted after page refresh
            var serializedFilterModel = JsonSerializer.Serialize(filterModel);
            await JsRuntime.InvokeVoidAsync("UpdateQueryParams", "filterModel", serializedFilterModel);

            StateHasChanged();
        }
        catch (HttpRequestException ex)
        {
            _notificationService.AddNotification($"Cannot fetch clothing: {ex.Message}", NotificationType.Error);
        }
    }

    // Used by ItemSummary.razor
    public async Task ChangeSelectedItem(ServerClothingItem item)
    {
        selectedItem = item;
        await JsRuntime.InvokeVoidAsync("UpdateQueryParams", "itemId", selectedItem.Id);
    }

    public async Task Wear()
    {
        // Just use selected item since there the wear/wash buttons will only show for that item
        // I know this button can only be pressed when selectedItem is populated so disable null warning
        // https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/operators/null-forgiving
        await _apiService.Wear(selectedItem!);
        await FetchClothing();
    }

    public async Task Wash()
    {
        // Just use selected item since there the wear/wash buttons will only show for that item
        // I know this button can only be pressed when selectedItem is populated so disable null warning
        // https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/operators/null-forgiving
        await _apiService.Wash(selectedItem!);
        await FetchClothing();
    }

    private async void OnFieldChanged(object? sender,
        FieldChangedEventArgs e)
    {
        // _notificationService.AddNotification("something changed", NotificationType.Info);
        await FetchClothing();
    }

    public async Task ResetFilterModel()
    {
        filterModel = new FilterModel();
        await FetchClothing();
    }


}