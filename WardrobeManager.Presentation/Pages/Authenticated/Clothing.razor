@page "/clothing"
@attribute [Authorize]

@using WardrobeManager.Presentation.Components
@using WardrobeManager.Shared.Models
@using WardrobeManager.Presentation.Services.Implementation
@using WardrobeManager.Presentation.Services.Interfaces
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication


@inject IApiService ApiService
@* @inject HttpClient Http *@
@* @inject IHttpClientFactory ClientFactory *@

<PageTitle>Clothing</PageTitle>


@* <h1 class="subheading-text">@userid</h1> *@

<div class="flex flex-col justify-center items-center gap-14">
    <h1 class="text-3xl">Create, view, and edit your clothing items here!</h1>

    <AddClothingItem RefreshHandler="@Refresh"/>


    <div class="flex flex-col w-3/4  smooth-scroll justify-start">
        @if (clothing != null)
        {
            foreach (var clothingItem in clothing)
            {
                <div class="flex flex-row border-2 border-white p-4 w-full gap-10 justify-evenly items-center">
                    <svg onclick="@(() => DeleteItem(clothingItem))"
                         xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" width="50" height="50" viewBox="0 0 64 64">
                        <ellipse cx="32" cy="61" opacity=".3" rx="19" ry="3"></ellipse>
                        <path fill="#9c34c2" d="M43.299,55H20.701c-1.535,0-2.823-1.159-2.984-2.686L14,17h36l-3.717,35.314   C46.122,53.841,44.834,55,43.299,55z"></path>
                        <path fill="#ffa1ac" d="M50,22H14c-1.657,0-3-1.343-3-3v-2c0-1.657,1.343-3,3-3h36c1.657,0,3,1.343,3,3v2  C53,20.657,51.657,22,50,22z"></path>
                        <path d="M43.965,26.469l-2.248,21.757C41.602,49.237,40.746,50,39.729,50H33c-2.762,0-4.997,2.239-4.997,5 h15.296c1.535,0,2.823-1.159,2.984-2.686l3.152-30.249C46.712,21.784,44.274,23.747,43.965,26.469z" opacity=".15"></path>
                        <path fill="#fff" d="M21.111,37.65l-1.585-16.205c-0.004-0.04-0.009-0.08-0.015-0.119 C19.346,20.102,20.244,19,21.48,19h9.385c2.762,0,4.997-2.239,4.997-5H14c-1.657,0-3,1.343-3,3v2c0,1.657,1.343,3,3,3h0.558 l2.139,21.174C19.441,42.868,21.418,40.395,21.111,37.65z" opacity=".3"></path>
                        <line x1="17.5" x2="23.5" y1="17.5" y2="17.5" fill="none" stroke="#fff" stroke-linecap="round" stroke-linejoin="round" stroke-miterlimit="10" stroke-width="3"></line>
                        <path fill="#9c34c2" d="M39,14H25v-2c0-1.657,1.343-3,3-3h8c1.657,0,3,1.343,3,3V14z"></path>
                    </svg> @* delete icon *@

                    <EditClothingItem RefreshHandler="Refresh" ClothingItem="@clothingItem" />

                    <div>
                        <p class="text-xl pb-4">@clothingItem.Name</p>
                        <p class="text-base font-bold">@clothingItem.Category</p>
                    </div>


                    @if (clothingItem.ImageGuid != null)
                    {
                        string path = clothingItem.ImageGuid.ToString().Replace("{", "").Replace("}", "");
                        path = $"http://localhost:5054/img/{path}";

                        <img src="@path" width="100"/>
                    }
                </div>
            }
        }
        else {
            <div>clothing is null</div>
        }
    </div>

</div>

@code {
    List<ServerClothingItem>? clothing = null;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            /* var client = ClientFactory.CreateClient("WebAPI"); */

            /* await ApiService */

            // clothing = await client.GetFromJsonAsync<List<ServerClothingItem>>("/clothing");
            @* userid = await client.GetStringAsync("/ping"); *@
            clothing = await ApiService.GetClothing();

        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }


    public async Task Refresh()
    {

        StateHasChanged();
    }

    public async Task DeleteItem(ServerClothingItem item)
    {
        await ApiService.Delete(item);
        await Refresh();
    }

}
