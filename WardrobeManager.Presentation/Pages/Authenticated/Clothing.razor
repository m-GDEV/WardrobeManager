@page "/clothing"
@attribute [Authorize]

@using WardrobeManager.Presentation.Components
@using WardrobeManager.Presentation.Components.FormItems
@using WardrobeManager.Presentation.Components.Clothing
@using WardrobeManager.Shared.Models
@using WardrobeManager.Shared.Enums
@using WardrobeManager.Presentation.Services.Implementation
@using WardrobeManager.Presentation.Services.Interfaces
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using System.Text.RegularExpressions


@inject IApiService _apiService
@inject INotificationService _notificationService
@* @inject HttpClient Http *@
@* @inject IHttpClientFactory ClientFactory *@

<PageTitle>Clothing</PageTitle>


@* <h1 class="subheading-text">@userid</h1> *@

<div class="w-full flex flex-col items-center">


    <h1 class="pt-14 pb-12 heading-text">Create, view, and edit your clothing items here!</h1>


    <div class="grow pb-4 px-8 gap-8 flex flex-row justify-center w-full">
        @* Left Column *@
        <div class="basis-1/4 flex flex-col items-center grow overflow-scroll">
            <div class="flex flex-row justify-center relative w-full items-center">
                <h3 class="subheading-text">Filters</h3>
                <button @onclick="(async () => await ResetFilterModel())" class="absolute right-0 btn btn-sm btn-accent text-accent-content">Reset!</button>
            </div>
            <div class="rounded-xl bg-primary-content  w-full p-4 text-primary flex flex-col grow overflow-scroll">

                <EditForm EditContext="FilterContext" class="flex flex-col  h-full">
                    @* Toggles *@
                    <LabelAndElement Label="Has Image" Orientation="horizontal">
                        <SwitchToggle @bind-Enabled="filterModel.HasImage"/>
                    </LabelAndElement>
                    <LabelAndElement Label="Favourited" Orientation="horizontal">
                        <SwitchToggle @bind-Enabled="filterModel.Favourited"/>
                    </LabelAndElement>
                    <LabelAndElement Label="Recently Added" Orientation="horizontal">
                        <SwitchToggle @bind-Enabled="filterModel.RecentlyAdded"/>
                    </LabelAndElement>

                    @* Selects *@
                    <LabelAndElement Label="Category">
                        <InputSelect @bind-Value="filterModel.Category" class="select rounded-md bg-primary text-primary-content">
                            @foreach (var category in Enum.GetValues<ClothingCategory>())
                            {
                                <option value="@category">@ProjectConstants.GetNameWithSpacesAndEmoji(category)</option>
                            }
                        </InputSelect>
                    </LabelAndElement>
                    <LabelAndElement Label="Season">
                        <InputSelect @bind-Value="filterModel.Season" class="select rounded-md bg-primary text-primary-content">
                            @foreach (var season in Enum.GetValues<Season>())
                            {
                                <option value="@season">@ProjectConstants.GetNameWithSpacesAndEmoji(season)</option>
                            }
                        </InputSelect>
                    </LabelAndElement>

                    @* Data Pickers *@
                    <LabelAndElement Label="Date Added">
                        <DatePicker @bind-FromDate="filterModel.DateAddedFrom" @bind-ToDate="filterModel.DateAddedTo"/>
                    </LabelAndElement>
                    <LabelAndElement Label="Last Worn">
                        <DatePicker @bind-FromDate="filterModel.LastWornFrom" @bind-ToDate="filterModel.LastWornTo"/>
                    </LabelAndElement>
                    <LabelAndElement Label="Last Edited">
                        <DatePicker @bind-FromDate="filterModel.LastEditedFrom" @bind-ToDate="filterModel.LastEditedTo"/>
                    </LabelAndElement>

                    @* Ranges *@
                    <LabelAndElement Label="Times Worn">
                        <Range @bind-Count="filterModel.TimesWorn"/>
                    </LabelAndElement>
                    <LabelAndElement Label="Times Worn Since Wash">
                        <Range @bind-Count="filterModel.TimesWornSinceWash"/>
                    </LabelAndElement>
                </EditForm>
            </div>
        </div>
        @* Centre Column *@
        <div class="basis-2/4 bg-primary rounded-xl flex flex-col items-center gap-10  p-4 ">
            <EditForm EditContext="FilterContext" class="flex flex-row items-center justify-between gap-5 py-4 pb-4">
                <div class="flex flex-row justify-between  bg-base-200 px-4 py-2 rounded-full gap-6">
                    <TextInput @bind-Value="filterModel.SearchQuery" placeholder="Green T-Shirt" Css="bg-base-200" OptionalCallback="FetchClothing"/>
                    <span class="bi bi-search"/>
                </div>
                <div class="flex flex-row gap-3 items-center">
                    <p class="subtitle-text text-primary-content">Sort By</p>
                    <InputSelect @bind-Value="filterModel.SortBy" class="select select-sm rounded-md bg-primary-content text-primary">
                        @foreach (var sortby in Enum.GetValues<SortByCategories>())
                        {
                            var words = Regex.Matches(sortby.ToString(), @"([A-Z][a-z]+)").Cast<Match>().Select(m => m.Value);
                            var cat = (SortByCategories)sortby;
                            var withSpaces = string.Join(" ", words);
                            <option value="@sortby">@withSpaces</option>
                        }
                    </InputSelect>
                    <p class="text-primary-content">Ascending?</p>
                    <InputCheckbox @bind-Value="filterModel.IsAscending" class="checkbox checkbox-secondary"/>
                </div>

            </EditForm>
            <div class="overflow-scroll flex flex-col items-center gap-6 w-4/5  max-h-[20rem]">
                @if (clothing != null)
                {
                    foreach (var item in clothing)
                    {
                        <ItemSummary Item="item" ViewMethod="ChangeSelectedItem" EditMethod="EditItem" DeleteMethod="DeleteItem" CallbackAfterEdit="FetchClothing"/>
                    }
                }
            </div>

        </div>
        @* Right Column *@
        <div class="basis-1/4 flex flex-col items-center grow">
            <h3 class="subheading-text">Preview</h3>
            <div class="rounded-xl bg-primary-content grow w-full p-4 text-primary flex flex-col  grow">
                @* Psuedo header *@
                @if (selectedItem == null)
                {
                    @* https://stackoverflow.com/questions/32551291/in-css-flexbox-why-are-there-no-justify-items-and-justify-self-properties*@
                    @* Using my-auto cus there is no justify-self-center like self-center exists for the cross axis*@
                    <p class="subheading-text text-primary my-auto text-center">Press 'view' to see an item's details here!</p>
                }
                else
                {
                    <p class="subtitle-text">
                        @selectedItem.Name
                        @if (selectedItem.Favourited)
                        {
                            <span class="bi bi-stars text-xl text-accent"></span>
                        }
                    </p>
                    <div class="flex flex-row gap-3 py-4">
                        <span class="small-text badge badge-lg badge-secondary">@ProjectConstants.GetNameWithSpacesAndEmoji(selectedItem.Category)</span>
                        <span class="small-text badge badge-lg badge-accent">@ProjectConstants.GetNameWithSpacesAndEmoji(selectedItem.Season)</span>
                    </div>
                    @* Info *@
                    <LabelAndElement Label="Last Edited">
                        <p>@selectedItem.DateUpdated.ToString("MMMM d, yyyy")</p>
                    </LabelAndElement>
                    <LabelAndElement Label="Date Added">
                        <p>@selectedItem.DateAdded.ToString("MMMM d, yyyy")</p>
                    </LabelAndElement>
                    <LabelAndElement Label="Last Worn">
                        <p>@selectedItem.LastWorn.ToString("MMMM d, yyyy")</p>
                    </LabelAndElement>
                    <LabelAndElement Label="Desired Time Worn Before Wash">
                        <p>@selectedItem.DesiredTimesWornBeforeWash</p>
                    </LabelAndElement>
                    <LabelAndElement Label="Total Times Worn">
                        <p>@selectedItem.TimesWornTotal</p>
                    </LabelAndElement>
                    <div class="flex flex-row justify-center gap-5 pb-4">
                        <button class=" btn btn-sm btn-accent" @onclick="(async () => await Wear())">Wear</button>
                        <button class=" btn btn-sm btn-accent" @onclick="(async () => await Wash())">Wash</button>
                    </div>
                    <div class="flex flex-col justify-center rounded-xl">
                        @if (selectedItem.ImageGuid == null)
                        {
                            @* When ImageGuid is null it sends a request to this endpoint: "/images/". This does not go to the right controller so i'm doing this for now*@
                            <img src="@ProjectConstants.ApiUrl/images/blahblah" class="h- object-contain"/>
                        }
                        else
                        {
                            <div class="h-[80%] mx-auto ">
                                <img src="@ProjectConstants.ApiUrl/images/@selectedItem.ImageGuid" class="h-full object-contain rounded-xl"/>
                            </div>
                        }
                    </div>
                }
            </div>
        </div>
    </div>
</div>

@code {
    List<ServerClothingItem>? clothing = null;

    EditContext FilterContext;
    public FilterModel filterModel = new FilterModel();

    public ServerClothingItem? selectedItem = null;


    // Blazor Override Stuff
    protected override async Task OnInitializedAsync()
    {
        FilterContext = new(filterModel);
        FilterContext.OnFieldChanged += OnFieldChanged;

        await FetchClothing();
        await base.OnInitializedAsync();
    }

    // My Methods
    public async Task FetchClothing()
    {
        try
        {
            clothing = await _apiService.GetFilteredClothing(filterModel);

            // refresh the selected item (necessary to refresh because this does not get updated when the old clothing is replaced)
            if (selectedItem != null)
            {
                selectedItem = clothing.FirstOrDefault(item => item.Id == selectedItem.Id);
            }

            StateHasChanged();
        }
        catch (HttpRequestException ex)
        {
            _notificationService.AddNotification($"Cannot fetch clothing: {ex.Message}", NotificationType.Error);
        }
    }


    // Used by form items
    public async Task ChangeSelectedItem(ServerClothingItem item)
    {
        selectedItem = item;
    }

    public async Task DeleteItem(ServerClothingItem item)
    {
        try
        {
            await _apiService.Delete(item);
            clothing = await _apiService.GetFilteredClothing(filterModel);
            StateHasChanged();
        }
        catch (HttpRequestException ex)
        {
            _notificationService.AddNotification($"Cannot fetch clothing: {ex.Message}", NotificationType.Error);
        }
    }

    public async Task Wear()
    {
        // Just use selected item since there the wear/wash buttons will only show for that item
        await _apiService.Wear(selectedItem);
        await FetchClothing();
    }

    public async Task Wash()
    {
        // Just use selected item since there the wear/wash buttons will only show for that item
        await _apiService.Wash(selectedItem);
        await FetchClothing();
    }

    private async void OnFieldChanged(object? sender,
        FieldChangedEventArgs e)
    {
        // _notificationService.AddNotification("something changed", NotificationType.Info);
        await FetchClothing();
    }

    public async Task ResetFilterModel()
    {
        filterModel = new FilterModel();
        await FetchClothing();
    }

    public async Task EditItem(ServerClothingItem item)
    {
    }

}